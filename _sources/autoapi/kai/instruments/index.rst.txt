kai.instruments
===============

.. py:module:: kai.instruments


Attributes
----------

.. autoapisummary::

   kai.instruments.module_dir
   kai.instruments.default_inst


Classes
-------

.. autoapisummary::

   kai.instruments.Instrument
   kai.instruments.NIRC2
   kai.instruments.OSIRIS


Module Contents
---------------

.. py:data:: module_dir

.. py:class:: Instrument

   Bases: :py:obj:`object`


   .. py:attribute:: hdr_keys


   .. py:method:: get_bad_pixel_mask_name()


   .. py:method:: get_filter_name(hdr)


   .. py:method:: get_plate_scale(hdr)


   .. py:method:: get_position_angle(hdr)


   .. py:method:: get_parallactic_angle(hdr)


   .. py:method:: get_instrument_angle(hdr)


   .. py:method:: get_central_wavelength(hdr)


   .. py:method:: get_gain(hdr)


   .. py:method:: make_filenames(files, rootDir='', prefix='n')


   .. py:method:: get_distortion_maps(date)


   .. py:method:: get_align_type(errors=False)


   .. py:method:: get_saturation_level(hdr)


   .. py:method:: get_linearity_correction_coeffs(hdr)


   .. py:method:: get_radec(hdr)


   .. py:method:: get_mjd(hdr)


.. py:class:: NIRC2

   Bases: :py:obj:`Instrument`


   .. py:attribute:: name
      :value: 'NIRC2'



   .. py:attribute:: hdr_keys


   .. py:attribute:: bad_pixel_mask
      :value: 'nirc2mask.fits'



   .. py:attribute:: distCoef
      :value: ''



   .. py:attribute:: distXgeoim


   .. py:attribute:: distYgeoim


   .. py:attribute:: telescope
      :value: 'Keck'



   .. py:attribute:: telescope_diam
      :value: 10.5



   .. py:method:: get_filter_name(hdr)


   .. py:method:: get_plate_scale(hdr)

      
      Return the plate scale in arcsec/pixel.
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_position_angle(hdr)

      
      Get the sky PA in degrees East of North. 
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_parallactic_angle(hdr)

      
      Get the parallactic angle in degrees East of North
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_instrument_angle(hdr)


   .. py:method:: get_central_wavelength(hdr)

      
      Return the central wavelength of the filter for 
      this observation in microns.
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_gain(hdr)


   .. py:method:: make_filenames(files, rootDir='', prefix='n')


   .. py:method:: get_distortion_maps(hdr)

      

















      ..
          !! processed by numpydoc !!


   .. py:method:: get_align_type(hdr, errors=False)


   .. py:method:: get_saturation_level(hdr)

      
      Set to the 95% saturation threshold in DN.
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_linearity_correction_coeffs(hdr)

      
      Returns coefficients (`coeffs`, as defined below)
      in order to perform linearity correction

      x = (FITS_orig) / (No. of coadds)

      norm = coeffs[0] + coeffs[1] * x + coeffs[2] * x^2

      FITS_corrected = FITS_orig / norm

      From Stanimir Metchev's linearity correction code
      (http://www.astro.sunysb.edu/metchev/ao.html)















      ..
          !! processed by numpydoc !!


   .. py:method:: get_radec(hdr)

      
      Return list of RA and Dec as decimal degrees
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_mjd(hdr)

      
      Return observation time in MJD
















      ..
          !! processed by numpydoc !!


.. py:class:: OSIRIS

   Bases: :py:obj:`Instrument`


   
   OSIRIS Imager - after 2019
















   ..
       !! processed by numpydoc !!

   .. py:attribute:: name
      :value: 'OSIRIS'



   .. py:attribute:: hdr_keys


   .. py:attribute:: bad_pixel_mask
      :value: 'osiris_img_mask.fits'



   .. py:attribute:: distCoef
      :value: ''



   .. py:attribute:: distXgeoim


   .. py:attribute:: distYgeoim


   .. py:attribute:: telescope
      :value: 'Keck'



   .. py:attribute:: telescope_diam
      :value: 10.5



   .. py:method:: get_filter_name(hdr)


   .. py:method:: get_plate_scale(hdr)

      
      Return the plate scale in arcsec/pix.
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_pcu_scale(hdr)

      
      The scale on the PCU pinhole mask, in mm (at the front focus) per pixel
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_pcuxyRef(hdr)

      
      The reference position, when the PCU is on-axis
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_position_angle(hdr)

      
      Get the sky PA in degrees East of North. 
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_instrument_angle(hdr)

      
      Get the angle of the instrument w.r.t. to the telescope or 
      AO bench in degrees.
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_parallactic_angle(hdr)

      
      Get the parallactic angle in degrees East of North
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_central_wavelength(hdr)

      
      Return the central wavelength of the filter for 
      this observation in microns.
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_gain(hdr)


   .. py:method:: make_filenames(files, rootDir='', prefix='')


   .. py:method:: flip_images(files, rootDir='')

      
      Flip images (as they come from the detector flipped) and
      subtract reference pixels.
















      ..
          !! processed by numpydoc !!


   .. py:method:: subtract_reference_pixels(img)


   .. py:method:: get_distortion_maps(hdr)

      

















      ..
          !! processed by numpydoc !!


   .. py:method:: get_align_type(hdr, errors=False)


   .. py:method:: get_saturation_level(hdr)

      
      Set to the 95% saturation threshold in DN.
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_radec(hdr)

      
      Return list of RA and Dec as decimal degrees
















      ..
          !! processed by numpydoc !!


   .. py:method:: get_mjd(hdr)

      
      Return observation time in MJD
















      ..
          !! processed by numpydoc !!


.. py:data:: default_inst

